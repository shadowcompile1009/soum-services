// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: commission.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "commission";

export interface CommissionAnalysis {
  commissionTotalPercentage: number;
  commissionTotalFixed: number;
  paymentCommissionExtraFees: number;
  paymentCommission: number;
  paymentCommissionVat: number;
  nonPaymentCommission: number;
  nonPaymentCommissionVat: number;
  paymentCommissionWithVat: number;
  nonPaymentCommissionWithVat: number;
  penaltyCommission: number;
  penaltyCommissionVat: number;
  realEstateVat: number;
}

export interface CalculateCommissionSummaryResponse {
  commissionSummaries: BreakDownResponse[];
  productId: string;
}

export interface CalculateCommissionSummaryResponseForList {
  calculateCommissionSummaryResponses: CalculateCommissionSummaryResponse[];
}

export interface BreakDownResponse {
  withPromo: CommissionSummaryResponse | undefined;
  withoutPromo: CommissionSummaryResponse | undefined;
}

export interface CalculateCommissionSummaryRequest {
  commission: CommissionFilters | undefined;
  product: Product | undefined;
  calculationSettings: CalculationSettings | undefined;
  promoCode: PromoCode | undefined;
  allPayments: boolean;
  paymentModuleName: string;
  paymentOption: PaymentOption | undefined;
  reservation: Reservation | undefined;
  addonIds: string[];
  financingRequest: FinancingRequest | undefined;
}

export interface CalculateCommissionSummaryRequestForList {
  calculateCommissionSummaryRequests: CalculateCommissionSummaryRequest[];
}

export interface CreateCommissionSummaryRequest {
  commission: CommissionFilters | undefined;
  product: Product | undefined;
  calculationSettings: CalculationSettings | undefined;
  promoCode: PromoCode | undefined;
  order: Order | undefined;
  paymentModuleName: string;
  paymentOption: PaymentOption | undefined;
  reservation: Reservation | undefined;
  addOns: AddOn[];
  financingRequest: FinancingRequest | undefined;
}

export interface UpdateSellerCommissionRequest {
  product: Product | undefined;
  sellerNewCommission: number;
}

export interface ForceUpdateCommissionRequest {
  productId: string;
  orderId: string;
  grandTotal: number;
  payout: number;
  discount: number;
  buyerCommission: number;
  sellPrice: number;
}

export interface UpdateSellPriceRequest {
  product: Product | undefined;
}

export interface MigrateCommissionSummaryRequest {
  commission: CommissionFilters | undefined;
  product: Product | undefined;
  calculationSettings: MigrationCalculationSettings | undefined;
  promoCode: PromoCode | undefined;
  order: Order | undefined;
  paymentModuleName: string;
}

export interface Order {
  id: string;
}

export interface AddOn {
  id: string;
  addOnPrice: number;
}

export interface PaymentOption {
  id: string;
  paymentProvider: string;
  paymentCardType: string;
}

export interface CommissionFilters {
  userType: string;
  isBuyer: boolean;
}

export interface Product {
  id: string;
  sellPrice: number;
  priceRange: string;
  source: string;
  categoryId: string;
  modelId: string;
  varientId: string;
  conditionId: string;
}

export interface CalculationSettings {
  vatPercentage: number;
  applyDeliveryFeeSPPs: boolean;
  applyDeliveryFeeMPPs: boolean;
  applyDeliveryFee: boolean;
  deliveryFeeThreshold: number;
  deliveryFee: number;
  referralFixedAmount: number;
  applyReservation: boolean;
  applyFinancing: boolean;
}

export interface MigrationCalculationSettings {
  vatPercentage: number;
  applyDeliveryFeeSPPs: boolean;
  applyDeliveryFeeMPPs: boolean;
  applyDeliveryFee: boolean;
  deliveryFeeThreshold: number;
  deliveryFee: number;
  referralFixedAmount: number;
  buyerCommissionPercentage: number;
  sellerCommissionPercentage: number;
  priceQualityExtraCommission: number;
}

export interface Reservation {
  reservationAmount: number;
  reservationRemainingAmount: number;
}

export interface FinancingRequest {
  amount: number;
}

export interface PromoCode {
  promoLimit: number;
  type: string;
  generator: string;
  discount: number;
  percentage: number;
}

export interface CommissionSummaryResponse {
  id: string;
  commission: number;
  commissionVat: number;
  deliveryFee: number;
  deliveryFeeVat: number;
  totalVat: number;
  discount: number;
  grandTotal: number;
  commissionDiscount: number;
  sellPrice: number;
  commissionAnalysis: CommissionAnalysis | undefined;
  paymentId: string;
  reservation: Reservation | undefined;
  addOnsTotal: number;
  addOnsVat: number;
  addOnsGrandTotal: number;
  realEstateVat: number;
  financingRequest: FinancingRequest | undefined;
  paymentCardType?: string | undefined;
}

export interface ProductCommissionSummaryRequest {
  orderId: string;
  productId: string;
  isBuyer: boolean;
  isOriginalBreakDown: boolean;
}

export interface ProductCommissionSummaryResponse {
  id: string;
  commission: number;
  commissionVat: number;
  deliveryFee: number;
  deliveryFeeVat: number;
  totalVat: number;
  discount: number;
  grandTotal: number;
  commissionDiscount: number;
  productId: string;
  orderId: string;
  sellPrice: number;
  commissionAnalysis: CommissionAnalysis | undefined;
  reservation: Reservation | undefined;
  financingRequest: FinancingRequest | undefined;
}

export interface CalculateAddonSummaryRequest {
  productPrice: number;
  addonSummaryCalculateData: AddonSummaryCalculateData[];
}

export interface AddonSummaryCalculateData {
  priceType: string;
  addonPrice: number;
}

export interface CalculateAddonSummaryResponse {
  addOnsTotal: number;
  addOnsVat: number;
  addOnsGrandTotal: number;
}

export interface UpdateUsageCountRequest {
  promoCodeId: string;
  count: number;
}

export interface UpdateUsageCountResponse {
  ok: boolean;
}

export interface GetPromoDetailsRequest {
  filterField: string;
  filterFieldValue: string;
}

export interface PromoCodeScope {
  promoCodeScopeType: string;
  ids: string[];
}

export interface AvailablePayment {
  paymentProvider: string;
  paymentProviderType: string;
}

export interface DetailedPromoCode {
  promoLimit?: number | undefined;
  promoType: string;
  promoGenerator: string;
  discount?: number | undefined;
  percentage?: number | undefined;
  id: string;
  userType: string;
  status: string;
  code: string;
  isDefault: boolean;
  promoCodeScope: PromoCodeScope[];
  availablePayment: AvailablePayment[];
}

export interface GetDefaultPromoCodeRequest {
}

export interface GetFeedPromosRequest {
  feedIds: string[];
}

export interface GetFeedPromosResponse {
  DetailedPromoCode: DetailedPromoCode[];
}

export interface GetFeedPromoRequest {
  feedId: string;
}

export interface GetPromosByIdsRequest {
  ids: string[];
}

export interface GetPromosByIdsResponse {
  promos: DetailedPromoCode[];
}

export const COMMISSION_PACKAGE_NAME = "commission";

export interface CommissionServiceClient {
  calculateProductCommissionSummary(
    request: CalculateCommissionSummaryRequest,
  ): Observable<CalculateCommissionSummaryResponse>;

  calculateProductCommissionSummaryForList(
    request: CalculateCommissionSummaryRequestForList,
  ): Observable<CalculateCommissionSummaryResponseForList>;

  createProductCommissionSummary(request: CreateCommissionSummaryRequest): Observable<CommissionSummaryResponse>;

  migrateProductCommissionSummary(request: MigrateCommissionSummaryRequest): Observable<CommissionSummaryResponse>;

  getProductCommissionSummary(request: ProductCommissionSummaryRequest): Observable<ProductCommissionSummaryResponse>;

  updateSellerCommission(request: UpdateSellerCommissionRequest): Observable<ProductCommissionSummaryResponse>;

  updateSellPrice(request: UpdateSellPriceRequest): Observable<ProductCommissionSummaryResponse>;

  addSellerCommissionPenalty(request: UpdateSellerCommissionRequest): Observable<ProductCommissionSummaryResponse>;

  calculateAddonSummary(request: CalculateAddonSummaryRequest): Observable<CalculateAddonSummaryResponse>;

  updateUsageCount(request: UpdateUsageCountRequest): Observable<UpdateUsageCountResponse>;

  getPromoDetails(request: GetPromoDetailsRequest): Observable<DetailedPromoCode>;

  getDefaultPromoCode(request: GetDefaultPromoCodeRequest): Observable<DetailedPromoCode>;

  getFeedPromos(request: GetFeedPromosRequest): Observable<GetFeedPromosResponse>;

  getFeedPromo(request: GetFeedPromoRequest): Observable<DetailedPromoCode>;

  getPromosByIds(request: GetPromosByIdsRequest): Observable<GetPromosByIdsResponse>;

  forceUpdateCommission(request: ForceUpdateCommissionRequest): Observable<ProductCommissionSummaryResponse>;
}

export interface CommissionServiceController {
  calculateProductCommissionSummary(
    request: CalculateCommissionSummaryRequest,
  ):
    | Promise<CalculateCommissionSummaryResponse>
    | Observable<CalculateCommissionSummaryResponse>
    | CalculateCommissionSummaryResponse;

  calculateProductCommissionSummaryForList(
    request: CalculateCommissionSummaryRequestForList,
  ):
    | Promise<CalculateCommissionSummaryResponseForList>
    | Observable<CalculateCommissionSummaryResponseForList>
    | CalculateCommissionSummaryResponseForList;

  createProductCommissionSummary(
    request: CreateCommissionSummaryRequest,
  ): Promise<CommissionSummaryResponse> | Observable<CommissionSummaryResponse> | CommissionSummaryResponse;

  migrateProductCommissionSummary(
    request: MigrateCommissionSummaryRequest,
  ): Promise<CommissionSummaryResponse> | Observable<CommissionSummaryResponse> | CommissionSummaryResponse;

  getProductCommissionSummary(
    request: ProductCommissionSummaryRequest,
  ):
    | Promise<ProductCommissionSummaryResponse>
    | Observable<ProductCommissionSummaryResponse>
    | ProductCommissionSummaryResponse;

  updateSellerCommission(
    request: UpdateSellerCommissionRequest,
  ):
    | Promise<ProductCommissionSummaryResponse>
    | Observable<ProductCommissionSummaryResponse>
    | ProductCommissionSummaryResponse;

  updateSellPrice(
    request: UpdateSellPriceRequest,
  ):
    | Promise<ProductCommissionSummaryResponse>
    | Observable<ProductCommissionSummaryResponse>
    | ProductCommissionSummaryResponse;

  addSellerCommissionPenalty(
    request: UpdateSellerCommissionRequest,
  ):
    | Promise<ProductCommissionSummaryResponse>
    | Observable<ProductCommissionSummaryResponse>
    | ProductCommissionSummaryResponse;

  calculateAddonSummary(
    request: CalculateAddonSummaryRequest,
  ): Promise<CalculateAddonSummaryResponse> | Observable<CalculateAddonSummaryResponse> | CalculateAddonSummaryResponse;

  updateUsageCount(
    request: UpdateUsageCountRequest,
  ): Promise<UpdateUsageCountResponse> | Observable<UpdateUsageCountResponse> | UpdateUsageCountResponse;

  getPromoDetails(
    request: GetPromoDetailsRequest,
  ): Promise<DetailedPromoCode> | Observable<DetailedPromoCode> | DetailedPromoCode;

  getDefaultPromoCode(
    request: GetDefaultPromoCodeRequest,
  ): Promise<DetailedPromoCode> | Observable<DetailedPromoCode> | DetailedPromoCode;

  getFeedPromos(
    request: GetFeedPromosRequest,
  ): Promise<GetFeedPromosResponse> | Observable<GetFeedPromosResponse> | GetFeedPromosResponse;

  getFeedPromo(
    request: GetFeedPromoRequest,
  ): Promise<DetailedPromoCode> | Observable<DetailedPromoCode> | DetailedPromoCode;

  getPromosByIds(
    request: GetPromosByIdsRequest,
  ): Promise<GetPromosByIdsResponse> | Observable<GetPromosByIdsResponse> | GetPromosByIdsResponse;

  forceUpdateCommission(
    request: ForceUpdateCommissionRequest,
  ):
    | Promise<ProductCommissionSummaryResponse>
    | Observable<ProductCommissionSummaryResponse>
    | ProductCommissionSummaryResponse;
}

export function CommissionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "calculateProductCommissionSummary",
      "calculateProductCommissionSummaryForList",
      "createProductCommissionSummary",
      "migrateProductCommissionSummary",
      "getProductCommissionSummary",
      "updateSellerCommission",
      "updateSellPrice",
      "addSellerCommissionPenalty",
      "calculateAddonSummary",
      "updateUsageCount",
      "getPromoDetails",
      "getDefaultPromoCode",
      "getFeedPromos",
      "getFeedPromo",
      "getPromosByIds",
      "forceUpdateCommission",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CommissionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CommissionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMMISSION_SERVICE_NAME = "CommissionService";
