/v1/model:
  get:
    tags:
      - Model
    summary: Get all model linked with category, brand
    description: Get all model linked with category, brand
    operationId: getListModel
    parameters:
      - in: query
        name: categoryId
        description: 'Category Id linked'
        required: true
        schema:
          type: string
          example: '60661c60fdc090d1ce2d4914'
      - in: query
        name: brandId
        description: 'Brand Id linked'
        required: true
        schema:
          type: string
          example: '60640602929f92968a347b12'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelsResponse'
            examples:
              successExample:
                $ref: '#/components/examples/v1GetModelsResponse'
/v1/model/{modelId}:
  get:
    tags:
      - Model
    summary: Get specific model with id
    description: Get specific model with id
    operationId: getModel
    parameters:
      - in: path
        name: modelId
        description: 'Model Id'
        required: true
        schema:
          type: string
          example: '607486ce1dda2e1754145bca'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelResponse'
            examples:
              successExample:
                $ref: '#/components/examples/v1GetModelResponse'
/v1/model/summary/{categoryId}:
  get:
    tags:
      - Model
    summary: Get all model available products
    description: Get all model available products
    operationId: getModelsSummary
    parameters:
      - in: path
        name: categoryId
        description: 'Category Id linked'
        required: true
        schema:
          type: string
          example: '60661c60fdc090d1ce2d4914'
      - in: query
        name: priceMax
        description: 'Max price for selected models products'
        required: false
        schema:
          type: integer
          example: 1000
      - in: query
        name: priceMin
        description: 'Min price for selected models products'
        required: false
        schema:
          type: integer
          example: 0
      - in: query
        name: brands
        description: 'Comma separated list of selected brands ids'
        required: false
        schema:
          type: string
          example: '60661c60fdc090d1ce2d4914'
      - in: query
        name: models
        description: 'Comma separated list of selected models ids'
        required: false
        schema:
          type: string
          example: '60661c60fdc090d1ce2d4914'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelsSummaryResponse'
/v1/model/summary:
  put:
    tags:
      - Model
    summary: Cronjob entry to update the available total products per model
    description: Cronjob entry to update the available total products per model
    operationId: updateTotalProductsPerModel
    responses:
      '200':
        description: 'successful operation'
/v1/model/change-category-position:
  put:
    tags:
      - Model
    summary: Given list of models id and positions to change the list ordering 
    description: Given list of models id and positions to change the list ordering 
    operationId: updateModelCategoryPosition
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/definitions/UpdateModelCategoryPosition'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
/v1/model/update-model-setting:
  put:
    tags:
      - Model
    summary: Cronjob entry to update the list of models
    description: Cronjob entry will check the list of available models and update settings
    operationId: updateModelSetting
    responses:
      '200':
        description: 'successful operation'
/v1/model/search/{keyword}:
   get:
     tags:
       - Model
     summary: Get all models like keyword
     description: Get all models like keyword
     operationId: searchModel
     parameters:
       - in: header
         name: token
         required: false
         schema:
           type: string
           example: >-
             eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMmRkYjE2MDg5ZDc1MjhkM2E2ZmEyMiIsImlhdCI6MTYzMTAwNzM4NSwiZXhwIjoxNjMzNTk5Mzg1fQ.5byciTrTEgINRZmJFfVJew_btr6kphN9qEiOWeyeM1U
       - in: header
         name: client-id
         required: false
         schema:
           type: string
           example: client-web
       - in: path
         name: keyword
         description: 'Search keyword'
         required: true
         schema:
           type: string
           example: 'iphone'
       - in: query
         name: userCity
         description: User city
         required: false
         schema:
           type: string
           example: Riyadh
       - in: query
         name: sortDirection
         description: product sorting function, sorting may be applied for price or date
         required: false
         schema:
           type: string
           example: lowToHigh
       - in: query
         name: page
         description: page number
         required: false
         type: number
         example: 1
       - in: query
         name: size
         description: How many elements to return
         required: false
         schema:
           type: number
           example: 10
     responses:
       '200':
         description: 'successful operation'
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/v1GetModelsResponse'
             examples:
               successExample:
                 $ref: '#/components/examples/v1GetModelsResponse'
/v1/model/suggest/{keyword}:
   get:
     tags:
       - Model
     summary: Get suggestions like keyword
     description: Get suggestions like keyword
     operationId: suggestModel
     parameters:
       - in: path
         name: keyword
         description: 'suggested models'
         required: true
         schema:
           type: string
           example: 'ip'
       - in: query
         name: limit
         description: 'Number of suggestions to show'
         required: false
         schema:
           type: string
           example: '5'
     responses:
       '200':
         description: 'successful operation'
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/v1GetModelsSuggestionsResponse'
             examples:
               successExample:
                 $ref: '#/components/examples/v1GetModelsSuggestionsResponse'
/v1/model/collection/{collectionType}:
  get:
    tags:
      - Model
    summary: Get most sold models
    description: Get most sold models
    operationId: getMostSoldModels
    parameters:
      - in: path
        name: collectionType
        description: 'Collection Type'
        required: true
        schema:
          type: string
          example: 'mostSold'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelsSummaryResponse'
/v1/model/{modelId}/commission:
  get:
    tags:
      - Model
    summary: Get specific model setting with model id
    description: Get specific model setting with model id
    operationId: getModelCommissionSetting
    parameters:
      - in: path
        name: modelId
        description: 'Model Id'
        required: true
        schema:
          type: string
          example: '607486ce1dda2e1754145bca'
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          example: admin-web
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDY2MzIxMDUsImV4cGlyZXNJbiI6NDMyMCwiaXAiOm51bGwsImVtYWlsX2FkZHJlc3MiOiJtLmR1b25nQHNvdW0uc2EiLCJpZCI6IjYxNWU3YjIyNjU1NDQ4NzlkMjk1ZmVmMSJ9.XvfnCsicOGpZ97T7vmAtHXSxOBJ50G4pnjAcKtA4PDw
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelSettingResponse'
            examples:
              successExample:
                $ref: '#/components/examples/v1GetModelSettingResponse'
  put:
    tags:
      - Model
    summary: Update specific model setting with model id
    description: Update specific model setting with model id
    operationId: updateModelCommissionSetting
    parameters:
      - in: path
        name: modelId
        description: 'Model Id'
        required: true
        schema:
          type: string
          example: '607486ce1dda2e1754145bca'
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          example: admin-web
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDY2MzIxMDUsImV4cGlyZXNJbiI6NDMyMCwiaXAiOm51bGwsImVtYWlsX2FkZHJlc3MiOiJtLmR1b25nQHNvdW0uc2EiLCJpZCI6IjYxNWU3YjIyNjU1NDQ4NzlkMjk1ZmVmMSJ9.XvfnCsicOGpZ97T7vmAtHXSxOBJ50G4pnjAcKtA4PDw
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/definitions/v1GetModelSettingResponse'
    responses:
      '200':
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1GetModelSettingResponse'
            examples:
              successExample:
                $ref: '#/components/examples/v1GetModelSettingResponse'