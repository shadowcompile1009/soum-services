/v1/user/{userId}/profile:
  get:
    tags:
      - User
    summary: Get User Profile Information
    description: >-
      For valid response, provide valid user id. Otherwise, will generate
      error with no data returned
    operationId: getProfileByUserId
    parameters:
      - name: userId
        in: path
        description: ID of user need to be fetched
        required: true
        schema:
          type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Profile"
            examples:
              successExample:
                $ref: "#/components/examples/v1GetUserProfileResponse"
              failExample:
                $ref: "#/components/examples/v1FailGetUserProfileResponse"
      "400":
        description: Invalid ID User ID
      "404":
        description: Profile not found
  put:
    tags:
      - User
    summary: Update User Profile Information
    description: Update credentials with registered phone number
    operationId: putCredentialsByUserId
    parameters:
      - name: userId
        in: path
        description: ID of user need to be udpated
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            properties:
              first_name:
                type: string
                example: tester
              last_name:
                type: string
                example: Dev
              email_address:
                type: string
                example: dev@yopmail.com
              password:
                type: string
                example: "12345678"
            required:
              - first_name
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1PutUserResponse"
              failExample:
                $ref: "#/components/examples/v1PutFailUserResponse"
      "400":
        description: Invalid ID User ID
      "404":
        description: Profile not found
/v1/user/{userId}/update:
  put:
    tags:
      - User
    summary: Update User Profile Information
    description: Update credetials with registered phone number
    operationId: putCredentialsByUserId1
    parameters:
      - name: userId
        in: path
        description: ID of user need to be udpated
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: tester
              last_name:
                type: string
                example: Dev
              email_address:
                type: string
                example: dev@yopmail.com
              password:
                type: string
                example: "12345678"
            required:
              - first_name
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1PutUserResponse"
              failExample:
                $ref: "#/components/examples/v1PutFailUserResponse"
      "400":
        description: Invalid ID User ID
      "404":
        description: Profile not found
/v1/user/{userId}/bank-accounts:
  get:
    tags:
      - User
    summary: Get User Bank Accounts Information
    description: >-
      For valid response, provide valid user id. Otherwise, will generate
      error with no data returned
    operationId: getBankAccountsByUserId
    parameters:
      - name: userId
        in: path
        description: ID of user need to be fetched
        required: true
        schema:
          type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/BankAccounts"
      "400":
        description: Invalid ID User ID
      "404":
        description: Bank Accounts not found
/v1/user/{userId}/products:
  get:
    tags:
      - User
    summary: Get the User's Products with Pagination
    description: Get list of Products of the user with page number and page size params
    operationId: getProductsByUserId
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: path
        name: page
        description: Page Number
        required: false
        schema:
          type: number
      - in: path
        name: pageSize
        description: Number of items per page
        required: false
        schema:
          type: number
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Products"
      "404":
        description: Products not found
/v1/user/{userId}/orders:
  get:
    tags:
      - User
    summary: Get the User's Orders with Pagination
    description: Get list of Orders of the user with page number and page size params
    operationId: getOrdersByUserId
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: path
        name: page
        description: Page Number
        required: false
        schema:
          type: number
      - in: path
        name: pageSize
        description: Number of items per page
        required: false
        schema:
          type: number
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Orders"
      "404":
        description: Orders not found
/v1/user/{userId}/orders-synced:
  get:
    tags:
      - User
    summary: Sync orders of the user on to Typesense
    description: This API emits a Kafka message which the Merchant micro-service is listening. Then, Merchant microservice send the data to Typesense and save to its own database at the same time.
    operationId: syncOrders
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: query
        name: limit
        description: Number of orders are proceeded at a time.
        required: false
        schema:
          type: number
    responses:
      "200":
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Orders"
      "400":
        description: Failed to proceed the data of orders
/v1/user/{userId}/payments:
  get:
    tags:
      - User
    summary: Get the User's Payments with Pagination
    description: Get list of Payments of the user with page number and page size params
    operationId: getPaymentsByUserId
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: path
        name: page
        description: Page Number
        required: false
        schema:
          type: number
      - in: path
        name: pageSize
        description: Number of items per page
        required: false
        schema:
          type: number
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Payments"
      "404":
        description: Payments not found
  post:
    tags:
      - User
    summary: Add an payment of user
    description: ""
    operationId: addPayment
    parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61123afc80d3805c7829ff65
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/definitions/Payment"
    responses:
      "201":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Payments"
/v1/user/{userId}/ibans:
  get:
    tags:
      - User
    summary: Get the User's IBAN with Pagination
    description: Get list of IBAN of the user with page number and page size params
    operationId: getIBANByUserId
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: path
        name: page
        description: Page Number
        required: false
        schema:
          type: number
      - in: path
        name: pageSize
        description: Number of items per page
        required: false
        schema:
          type: number
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/IBANs"
      "404":
        description: IBANs not found
  post:
    tags:
      - User
    summary: Add an IBAN of user
    description: ""
    operationId: addIBAN
    parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61123afc80d3805c7829ff65
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/definitions/IBAN"
    responses:
      "201":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/IBANs"
/v1/user/{userId}/address:
  get:
    tags:
      - User
    summary: Get the User's Addresses with Pagination
    description: Get list of Payments of the user with page number and page size params
    operationId: getAddresses
    parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61123afc80d3805c7829ff65
        required: true
        schema:
          type: string
      - in: path
        name: page
        description: Page Number
        example: 1
        required: false
        schema:
          type: number
      - in: path
        name: pageSize
        description: Number of items per page
        example: "10"
        required: false
        schema:
          type: number
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1GetUserAddressResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1GetUserAddressResponse"
      "404":
        description: Addresses not found
  post:
    tags:
      - User
    summary: Add an address of user
    description: ""
    operationId: addAddress
    parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61123afc80d3805c7829ff65
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              street:
                type: string
              district:
                type: string
              city:
                type: string
              postal_code:
                type: string
    responses:
      "201":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1AddNewAddressResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1AddNewAddressResponse"
/v1/user/{userId}/address/{addressId}:
  put:
    tags:
      - User
    summary: Update an address of user
    description: ""
    operationId: updateAddress
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
          example: 61123afc80d3805c7829ff65
      - in: path
        name: addressId
        description: Address Id needs to be updated
        required: true
        schema:
          type: string
          example: 6117ce23399bb75edfd5375c
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              street:
                type: string
              district:
                type: string
              city:
                type: string
              postal_code:
                type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1UpdateAddressResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1UpdateAddressResponse"
  delete:
    tags:
      - User
    summary: Delete an user address
    description: ""
    operationId: deleteAddress
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
      - in: path
        name: addressId
        description: Address Id needs to be deleted
        required: true
        schema:
          type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1DeleteAddressResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1DeleteAddressResponse"
/v1/user/signup:
  post:
    tags:
      - User
    summary: Signup
    description: ""
    operationId: signUp
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              phone_number:
                type: string
              email_address:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              password:
                type: string
              confirm_password:
                type: string
              accept_tc:
                type: boolean
    responses:
      "201":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/Address"
/v1/user/send-report:
  get:
    tags:
      - User
    summary: Send Users sheet
    description: Send daily Users sheet
    operationId: sendUsersReport
    parameters:
      - in: query
        name: sendTo
        description: List of emails that will receive the report, splitted by a comma
        required: false
        schema:
          type: string
          example: t.nguyen@soum.sa
      - in: query
        name: sendGridKey
        description: Use this param for testing purpose only, on production, there is an official key.
        required: false
        schema:
          type: string
          example: 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
      - in: query
        name: from
        description: Use this param for testing purpose only, keep this sample value if you use the sample above sendGridKey
        required: false
        schema:
          type: string
          example: t.nguyen@soum.sa
      - in: query
        name: months
        description: Use this param for testing purpose only
        required: false
        schema:
          type: number
          example: 6
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: '#/components/examples/v1SendEmailSuccessResponse'
      "424":
        description: when failing in sending email
        content:
          application/json:
            examples:
              failExample:
                $ref: '#/components/examples/v1FailedSendEmailResponse'
/v1/user/wishlist:
  post:
    tags:
      - User
    summary: Wishlist
    description: Add product to wishlist
    operationId: wishList
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              product_id:
                type: string
    parameters:
      - in: header
        name: token
        description: Token from authentication
        required: true
        schema:
          type: string
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          example: admin-web
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1AddProductToWishListResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1AddProductToWishListResponse"
/v1/user/password/request/sms:
  post:
    tags:
      - User
    summary: Reset password via sms
    description: ""
    operationId: resetPassword
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              phone_number:
                type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1ResetPasswordResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1ResetPasswordResponse"
              failExample:
                $ref: "#/components/examples/v1FailResetPasswordResponse"
/v1/user/password/verify:
  post:
    tags:
      - User
    summary: Verify reset password token
    description: ""
    operationId: verifyResetPasswordToken
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              password:
                type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1VerifyResetPasswordResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1VerifyResetPasswordResponse"
              failExample:
                $ref: "#/components/examples/v1FailVerifyResetPasswordResponse"
/v1/user/my-sell-products:
  get:
    tags:
      - User
    summary: Get list of selling product with pagination
    description: >-
      For valid response, provide valid user id. Otherwise, will generate
      error with no data returned
    operationId: getSellingProduct
    parameters:
      - name: size
        in: query
        description: size of viewing listing
        required: false
        schema:
          type: number
      - name: page
        in: query
        description: current page of viewing listing
        required: false
        schema:
          type: number
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          example: "client-web"
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzNzgzMDk0NywiZXhwIjoxNjQwNDIyOTQ3fQ.CmwBWhtD6qzlVzob4rluKwnaymzVTIXP9xBxZRW_ek0
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1GetSellingProductResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1GetSellingProductResponse"
/v1/user/my-reservations:
  get:
    tags:
      - User
    parameters:
      - in: header
        name: client-id
        require: true
        schema:
          type: string
          example: client-web
      - in: header
        name: token
        require: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzNzgzMDk0NywiZXhwIjoxNjQwNDIyOTQ3fQ.CmwBWhtD6qzlVzob4rluKwnaymzVTIXP9xBxZRW_ek0
      - in: query
        name: page
        require: false
        schema:
          type: number
          example: 1
      - in: query
        name: size
        require: false
        schema:
          type: number
          example: 10
    responses:
      "200":
        description: get the list of reservations successful
        content:
          application/json:
            schema:
              $ref: "#/"
            examples:
              successExample:
                $ref: "#/"

/v1/user/{userId}/fcm:
  get:
    tags:
      - User
    summary: Get device Tokens
    description: Get device Tokens
    operationId: getDeviceTokens
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzOTMyNTg5NywiZXhwIjoxNjQxOTE3ODk3fQ.Aaic2K-Q8yMHB1zMU2sNRYtorp7pE4p6n9AM8QIFVtY
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61256642bd7b036b91d0b3c4
        required: true
        schema:
          type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1AddDeviceToken"
  post:
    tags:
      - User
    summary: Add device Token
    description: Add device Token
    operationId: addDeviceToken
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzOTMyNTg5NywiZXhwIjoxNjQxOTE3ODk3fQ.Aaic2K-Q8yMHB1zMU2sNRYtorp7pE4p6n9AM8QIFVtY
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
      - in: path
        name: userId
        description: ID of the user
        example: 61256642bd7b036b91d0b3c4
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              fcm_token:
                type: string
                example: cIjc7kmaQZWlZqQjIQTlw4:APA91bFtXuYMQDANogGYB2D6jKWffcYq4BN9s6IgRLlB0Dhj7vbB0kTf7VO74Kgh_LQnVHgFaczU_f_BP3oAhO30OxNpUZu3W-eeU_NbC0NRZW_xNtERYkUeOWlKR89APlwm6A8JBZCz
              platform:
                type: string
                enum:
                  - ios
                  - android
                  - web
              app_version:
                type: string
              status:
                type: string
                enum:
                  - Enabled
                  - Disabled
                  - Deleted
    responses:
      "201":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1AddDeviceToken"
  delete:
    tags:
      - User
    summary: Delete All Device tokens of user
    description: Delete All Device tokens of user
    operationId: deleteUserDeviceTokens
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMmRkYjE2MDg5ZDc1MjhkM2E2ZmEyMiIsImlhdCI6MTYzOTMyOTU4NCwiZXhwIjoxNjQxOTIxNTg0fQ.tfcadCGqDYZWtnJj34oJGf09-G1tAW7vKSKIsVCCL4s
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          example: admin-web
          parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
          example: 61256642bd7b036b91d0b3c4
    responses:
      "200":
        description: successful operation
/v1/user/{userId}/fcm/{fcmToken}:
  put:
    tags:
      - User
    summary: Update an device token of user
    description: ""
    operationId: updateDeviceToken
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzOTMyNTg5NywiZXhwIjoxNjQxOTE3ODk3fQ.Aaic2K-Q8yMHB1zMU2sNRYtorp7pE4p6n9AM8QIFVtY
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
          example: 61256642bd7b036b91d0b3c4
      - in: path
        name: fcmToken
        description: Device token needs to be updated
        required: true
        schema:
          type: string
          example: >-
            cIjc7kmaQZWlZqQjIQTlw4:APA91bFtXuYMQDANogGYB2D6jKWffcYq4BN9s6IgRLlB0Dhj7vbB0kTf7VO74Kgh_LQnVHgFaczU_f_BP3oAhO30OxNpUZu3W-eeU_NbC0NRZW_xNtERYkUeOWlKR89APlwm6A8JBZCz
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              app_version:
                type: string
              status:
                type: string
                enum:
                  - Enabled
                  - Disabled
                  - Deleted
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1UpdateDeviceToken"
/v1/user/preferences:
  get:
    tags:
      - User
    summary: Get User Preferences
    description: >-
      Get Preferences of the user.
    operationId: getUserPreferences
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWQwNiIsImlhdCI6MTY1NDUyMTA1NCwiZXhwIjoxNjU3MTEzMDU0fQ.87bgLaU9nxLo77lhJ4nZRy8pzIfLddoFXkkfX3GClxE
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                value:
                  message: "Get user preferences successful"
                  responseData:
                    _id: "60da07f53bde511843c59d06"
                    addresses: []
                    preferences:
                      skip_pre_listing: true
                      skip_post_listing: false
                      is_wallet_first_visit: true
                      is_cancellation_alert: false
                  status: "success"
                  timeStamp: "2022-06-08 08:35:35"
                  violations: null
      "400":
        description: Invalid ID User ID
  put:
    tags:
      - User
    summary: Update the preferences of user
    description: ""
    operationId: updateUserPreferences
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWQwNiIsImlhdCI6MTY1NDUyMTA1NCwiZXhwIjoxNjU3MTEzMDU0fQ.87bgLaU9nxLo77lhJ4nZRy8pzIfLddoFXkkfX3GClxE
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
    requestBody:
      requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              skip_pre_listing:
                type: boolean
                example: false
              skip_post_listing:
                type: boolean
                example: false
              is_wallet_first_visit:
                type: boolean
                example: false
              is_new_badge_alert:
                type: boolean
                example: false
              is_cancellation_alert:
                type: boolean
                example: false
              is_penalized_alert: 
                type: boolean
                example: false
              
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                value:
                  message: "Update user preferences successfull"
                  responseData:
                    _id: "60da07f53bde511843c59d06"
                    addresses: []
                    preferences:
                      skip_pre_listing: true
                      skip_post_listing: false
                      is_wallet_first_visit: false
                  status: "success"
                  timeStamp: "2022-06-08 08:35:35"
                  violations: null
/v1/user/{userId}:
  delete:
    tags:
      - User
    summary: Delete user account
    description: ""
    operationId: deleteUser
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWNmMCIsImlhdCI6MTYzOTMyNTg5NywiZXhwIjoxNjQxOTE3ODk3fQ.Aaic2K-Q8yMHB1zMU2sNRYtorp7pE4p6n9AM8QIFVtY
      - in: header
        name: client-id
        required: false
        schema:
          type: string
          parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
          example: 61256642bd7b036b91d0b3c4
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userDeleteResponse"
            examples:
              successExample:
                $ref: "#/components/examples/userDeleteResponse"
/v1/user/orders:
  get:
    tags:
      - User
    summary: Get User orders (buyer only)
    description: >-
      Get User orders (buy only)
    operationId: getUserOrders
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZGEwN2Y1M2JkZTUxMTg0M2M1OWQwNiIsImlhdCI6MTY1NDUyMTA1NCwiZXhwIjoxNjU3MTEzMDU0fQ.87bgLaU9nxLo77lhJ4nZRy8pzIfLddoFXkkfX3GClxE
      - in: header
        name: client-id
        required: false
        schema:
          type: string
      - in: query
        name: page
        description: Page Number
        required: false
        schema:
          type: number
      - in: query
        name: size
        description: Number of items per page
        required: false
        schema:
          type: number
      - in: query
        name: type
        description: type of orders
        required: false
        schema:
          type: enum      
            - buyer
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/definitions/BuyerOrdersList"
/v1/user/:
  get:
    tags:
      - User
    summary: Get users data
    description: >-
      Get users (all/search by .../status/beta user/ key seller)
    operationId: getUsers
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYWU4MGY1MmRhNGMyNjJhMDFlNWYxOSIsImlhdCI6MTY2NTQyMjA5OCwiZXhwIjoxNjY4MDE0MDk4fQ.80jhPBPvnSl33vkkgWv4GDfRTktZ3z2BqDzFmjPVh7c
      - in: header
        name: client-id
        required: true
        schema:
          type: string
        example: admin-web
      - in: query
        name: page
        description: Page Number (default = 1)
        required: false
        schema:
          type: number
      - in: query
        name: size
        description: Number of items per page (default = 20)
        required: false
        schema:
          type: number
      - in: query
        name: isGetBetaUser
        description: Should select only beta users
        required: false
        schema:
          type: boolean
          example: false
      - in: query
        name: isGetKeySeller
        required: false
        description: Should select only key seller users
        schema:
          type: boolean
          example: false
      - in: query
        name: isGetInactiveUser
        required: false
        description: Should select only key Inactive users
        schema:
          type: boolean
          example: false
      - in: query
        name: isMerchant
        description: Should list merchant users
        required: false
        schema:
          type: boolean
          example: false
      - in: query
        name: queryString
        required: false
        description: String to search by
        schema:
          type: string
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/getUsersResponse"
/v1/user/change-status/{userId}:
  put:
    tags:
      - User
    summary: Change user's status (block function implemented)
    description: >-
      Change user's status to active/inactive/block/unblock users
    operationId: updateUserStatus
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYjcxZDlmNWE2MWY1ZDQyM2U4ZjkzMyIsImlhdCI6MTY2NDYzMzE4NSwiZXhwIjoxNjY3MjI1MTg1fQ.0M1omtwsLMXKXb_-B6zWfRHf1lIx2eaSn1dCdYWLjxw
      - in: header
        name: client-id
        required: true
        schema:
          type: string
          example: admin-web
      - name: userId
        in: path
        description: ID of user need to be fetched
        required: true
        schema:
          type: string
    requestBody:
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  example: Inactive
                isBlockUser:
                  type: boolean
                  example: true
              required:
                - status
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/examples/v1PutUserResponse"
/v1/user/signup-wait-list:
  post:
    tags:
      - User
    summary: waitList
    description: Add mobile to waitList
    operationId: addNumberToSignupWaitList
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              mobileNumber:
                type: string
                example: 0555111111
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1AddUserToWaitlistListResponse"
            examples:
              successExample:
                $ref: "#/components/examples/v1AddUserToWaitlistListResponse"
      '400':
        description: failed to add mobile number to wait list
        content:
          application/json:
            examples:
              successExample:
                $ref: '#/components/examples/v1FailedToAddToWaitList'
/v1/user/{userId}/details:
  put:
    tags:
      - User
    summary: Update customer Information
    description: Update customer Information
    operationId: updateCustomer
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYjcxZDlmNWE2MWY1ZDQyM2U4ZjkzMyIsImlhdCI6MTY2NDYzMzE4NSwiZXhwIjoxNjY3MjI1MTg1fQ.0M1omtwsLMXKXb_-B6zWfRHf1lIx2eaSn1dCdYWLjxw
      - in: header
        name: client-id
        required: true
        schema:
          type: string
          example: admin-web
      - name: userId
        in: path
        description: user id of user that need to be updated
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: John Doe
              isMerchant:
                type: boolean
                example: true
              isBetaUser:
                type: boolean
                example: true
              isKeySeller:
                type: boolean
                example: true
              rating:
                type: number
                example: 5
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1PutUserResponse"
              failExample:
                $ref: "#/components/examples/v1PutFailUserResponse"
      "400":
        description: Failed to update user
        content:
          application/json:
            examples:
              successExample:
                $ref: "#/components/examples/v1FailedToUpdateUser"
/v1/user/{userId}/merchant:
  get:
    tags:
      - User
    summary: Get merchant seller profile
    description: This endpoint is to get a merchant seller profile which can be accessed from SPP
    operationId: getMerchantUser
    parameters:
      - in: path
        name: userId
        description: ID of the user
        required: true
        schema:
          type: string
          example: 64aab91e6b73ae00285f6238
    responses:
      "200":
        description: successful operation
        content:
          application/json:
            examples:
              successExample:
                value:
                  message: "Get Merchant profile successfully"
                  responseData:
                    _id: "64aab91e6b73ae00285f6238"
                    listings: 
                      sold_listings: 56
                      active_listings: 234
                      completed_sales: 36
                      purchased_products: 0
                    profilePic: ""
                    createdDate: "2023-07-09T13:41:50.278Z"
                    name: "Dave test"
                    isMerchant: true
                  status: "success"
                  timeStamp: "2022-06-08 08:35:35"
                  violations: null
