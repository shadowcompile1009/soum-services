stages:
  - prepare
  - test
  - build
  - deploy
  - clean
  - tag
  - deploy-prod

workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "main"
    when: always
    variables:
      ENVIRONMENT: "prod"
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME =~ /^feature\/*/
    when: always
    variables:
      ENVIRONMENT: "dev"
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "dev"
    when: always
    variables:
      ENVIRONMENT: "qa"
  - if: $CI_PIPELINE_SOURCE == "web" && ( $CI_COMMIT_REF_NAME =~ /^hotfix\/*/ || $CI_COMMIT_REF_NAME =~ /^release\/*/ )
    when: always
    variables:
      ENVIRONMENT: "staging"
  - when: never

variables:
  MONGODB_URI:
    description: "The URI of MongoDB database"
  ACTION:
    value: SETUP
    description: "SETUP or DESTROY the application"

.install-packages:
  script:
    - apt-get update
    - curl -sL https://deb.nodesource.com/setup_14.x | bash -
    - apt-get install -y nodejs

install-dependencies:
  stage: prepare
  before_script:
    - !reference [.install-packages, script]
  script:
    - npm install
  artifacts:
    untracked: false
    expire_in: never
    public: false
    paths:
      - ./node_modules
  only:
    variables:
      - $ACTION == 'SETUP'

validate-syntax:
  stage: test
  before_script:
    - !reference [.install-packages, script]
  script:
    - npm run lint
  needs:
    - job: install-dependencies
      artifacts: true
  only:
    variables:
      - $ACTION == 'SETUP'

unit-test:
  stage: test
  before_script:
    - !reference [.install-packages, script]
  script:
    - npm run test
  needs:
    - job: install-dependencies
      artifacts: true
  only:
    variables:
      - $ACTION == 'SETUP'

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - mv .env.example .env
    - |
      if [ "${ENVIRONMENT}" == 'prod' ]; then
        sed -i 's/__DOMAIN__/apiv2\.soum\.sa/g' ./src/swagger/swagger.json
      else
        sed -i "s/__DOMAIN__/apiv2\.qa\.soum\.sa/g" ./src/swagger/swagger.json
      fi
    - IMAGE="$CI_REGISTRY_IMAGE/$(echo ${CI_COMMIT_REF_NAME} | sed -e 's#[/\.]#-#g' | tr '[:upper:]' '[:lower:]'):${CI_COMMIT_SHORT_SHA}"
    - docker build --pull -t "${IMAGE}" .
    - docker push "${IMAGE}"
  only:
    variables:
      - $ACTION == 'SETUP'

deploy:
  stage: deploy
  image: dtzar/helm-kubectl
  before_script:
    - kubectl config view
  script:
    - IMAGE="$CI_REGISTRY_IMAGE/$(echo ${CI_COMMIT_REF_NAME} | sed -e 's#[/\.]#-#g' | tr '[:upper:]' '[:lower:]'):${CI_COMMIT_SHORT_SHA}"
    - DOMAIN_PATH="$(echo ${CI_COMMIT_REF_NAME} | cut -d '/' -f2 | sed -e 's#[\.]#-#g' | tr '[:upper:]' '[:lower:]')"
    - PROJECT_NAME=soum-backend-${ENVIRONMENT}-${DOMAIN_PATH}
    - |
      if [ "${ENVIRONMENT}" == 'prod' ]; then
        SUB_DOMAIN='apiv2'
        REPLICAS=8
      else
        SUB_DOMAIN="apiv2.${ENVIRONMENT}"
        REPLICAS=2
      fi
    - cat registry-credentials.yml | sed "s#{{KUBE_NAMESPACE}}#$KUBE_NAMESPACE#g" | kubectl apply -f -
    - cat deployment.yaml | sed "s#{{CI_REGISTRY_IMAGE}}#${IMAGE}#g" | sed "s#{{project-name}}#${PROJECT_NAME}#g" | sed "s#{{environment}}#${ENVIRONMENT}#g" | sed "s#{{mongodb_uri}}#${MONGODB_URI}#g" | sed "s#{{replicas}}#${REPLICAS}#g" | kubectl apply -f -
    - cat kubernetes-ingress.yaml | sed "s#{{project-name}}#${PROJECT_NAME}#g" | sed "s#{{environment}}#${ENVIRONMENT}#g" | sed "s#{{sub-domain}}#${SUB_DOMAIN}#g"  | kubectl apply -f -
    - kubectl rollout restart deployment/${PROJECT_NAME}
  environment:
    name: $ENVIRONMENT 
  only:
    refs:
      - main
      - dev
      - /^feature\/*/
      - /^hotfix\/*/
      - /^release\/*/
    variables:
      - $ACTION == 'SETUP'

destroy:
  stage: clean
  image: dtzar/helm-kubectl
  before_script:
    - kubectl config view
  script:
    - IMAGE="$CI_REGISTRY_IMAGE/$(echo ${CI_COMMIT_REF_NAME} | sed -e 's#[/\.]#-#g' | tr '[:upper:]' '[:lower:]'):${CI_COMMIT_SHORT_SHA}"
    - DOMAIN_PATH="$(echo ${CI_COMMIT_REF_NAME} | cut -d '/' -f2 | sed -e 's#[\.]#-#g' | tr '[:upper:]' '[:lower:]')"
    - PROJECT_NAME=soum-backend-${ENVIRONMENT}-${DOMAIN_PATH}
    - |
      if [ "${ENVIRONMENT}" == 'prod' ]; then
        SUB_DOMAIN='apiv2'
        REPLICAS=8
      else
        SUB_DOMAIN="apiv2.${ENVIRONMENT}"
        REPLICAS=2
      fi
    - cat registry-credentials.yml | sed "s#{{KUBE_NAMESPACE}}#$KUBE_NAMESPACE#g" | kubectl delete -f -
    - cat deployment.yaml | sed "s#{{CI_REGISTRY_IMAGE}}#${IMAGE}#g" | sed "s#{{project-name}}#${PROJECT_NAME}#g" | sed "s#{{environment}}#${ENVIRONMENT}#g" | sed "s#{{mongodb_uri}}#${MONGODB_URI}#g" | sed "s#{{replicas}}#${REPLICAS}#g" | kubectl delte -f -
    - cat kubernetes-ingress.yaml | sed "s#{{project-name}}#${PROJECT_NAME}#g" | sed "s#{{environment}}#${ENVIRONMENT}#g" | sed "s#{{sub-domain}}#${SUB_DOMAIN}#g"  | kubectl delete -f -
  environment:
    name: $ENVIRONMENT 
  only:
    refs:
      - dev
      - /^feature\/*/
      - /^hotfix\/*/
      - /^release\/*/
    variables:
      - $ACTION == 'DESTROY'
